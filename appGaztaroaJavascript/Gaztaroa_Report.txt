Amaia Vertiz Conde
AppGaztaroa

** Commit 01: Primeros pasos en React Native (Tiempo: 1,5h)

    En esta práctica, ha resultado haber más problemas de los que en un inicio estimaba. 
    Me he enterado de que aunque ya tenía NodeJS y NPM instalados, la versión no era la adecuada.
    Para su actualización, he descargado el archivo de instalación de internet, pero al ejecutarlo me marcaba un error. No marcaba el por qué del error.
    Al final, me he enterado de que node estaba abierto en mi bash y el error se debía a eso.
    Una vez cerrado, lo he actualizado.

    Después de haber creado y visto la aplicación, he procedido a subirlo al repositorio de GitHub. 
    También con esto, he tenido problemas, ya que me he enterado de que tenía unos archivos extra que no debería tener. 
    Se me ha ido la cabeza y aunque estos archivos no los había subido, pensaba que los tenía que subir también. He tenido problemas con la resubida desde el directorio anterior. Al final, 
    he desvinculado el directorio de GitHub y lo he vinculado al directorio nuevo y subido.
    Después, al ver que había archivos que no debería haber, he vuelto a crear el proyecto y lo he subido (es el que se ve en el GitHub, ya que lo he subido en un directorio nuevo) a un repositorio nuevo. 

    Por último, he cambiado el color de fondo y el texto que se muestra en el App. 

    Nota para mi: ** npx expo start --clear **. Si no te pasa lo que me pasó a mi de que a veces no se actualiza bien. Seguramente sea por algún tipo de caché que hay por ahí.


** Commit 02: Componentes React Native (Tiempo: 1h)
    Una vez copiado el código me ha salido un error 500 que marcaba problemas en el archivo CalendarioComponents.js en la importación de @rneui/themed.
    SOLUCIÓN BUSCADA: He consultado si tengo @rneui/themed ejecutando "npm list @rneui/themed".
    El resultado ha sido el siguiente:
        appgaztaroajavascript@1.0.0 C:\Users\Lenovo\OneDrive\Escritorio\Teleco\Master teleco\Primero\Segundo cuatri\Despliegue de servicios multimedia\React Native\ReactNative_Gaztaroa\Avertcoiin-AppGaztaroa_AVertizConde\appGaztaroaJavascript
        └── (empty)
    Por tanto, he instalado @rneui/themed mediante: "npm install @rneui/themed"

    Después de esto, el resultado ha sido el esperado. Aun así, en mi movil el contenido aparecía desde muy arriba, y resultaba bastante incómodo de cara al usuario.
    Por tanto, he probado a dejar un margen en cada Campobase con respecto al eje y del contenedor. (<View style={{ marginTop: 20 }}> envolviendo "Calendario" en CampobaseComponent.js)
    La imagen que se mostraba estaba bien pero marcaba un error leve. Aparecía el contenido pero me apareció un warning: 
        Warning: Text strings must be rendered within a <Text> component.
        in RCTView (created by View)
        in View (created by Campobase)
    He envuelto los ListItems en text y el warning ha desaparecido.
    De <ListItem.Title>{item.nombre}</ListItem.Title> <ListItem.Subtitle>{item.descripcion}</ListItem.Subtitle>
    A <ListItem.Title> <Text>{item.nombre}</Text> {/* Envolvemos el texto en <Text> */} </ListItem.Title> <ListItem.Subtitle> <Text>{item.descripcion}</Text> {/* Envolvemos el texto en <Text> */} </ListItem.Subtitle>
    Iba a comprobar que funcionaba por última vez y expo había caído. Me aparecía un mensaje de  "Something went wrong. Sorry about that. You can go back hto Expo home or try to reload the proyect". No tenía ningún otro mensaje de error. Solo el del móvil. He reactualizado expo y react-native porque se me había desfasado la versión. No he notado ningún cambio. Me imagino que ha caído y solamente hay que esperar un poco.
    He ido a https://status.expo.dev/ para ver si expo había caído. Me ponía lo siguiente sobre hoy: "Partially Degraded Service". Me imagino que no funciona por eso.
    He visto que se puede emular el funcionamiento en el ordenador. Voy a probar si funciona. Pongo los pasos por aquí:
        1. Instalación de Android Studio.
        2. Nos aseguramos de seleccionar la opción de instalar "Android Virtual Device".
        3. Configuramos el dispositivo virtual:
            3.1. Abrimos Android Studio
            3.2. Vamos a More Actions -> Virtual Device Manager
            3.3. Seleccionamos un dispositivo móvil para emular + una imagen del sistema y le damos a finish. Yo he elgido el que estaba por defecto.
        4. Iniciamos el emulador (click al play)
        5. Ejecutamos nuestro proyecto
            5.1. npx expo start (--clear)
            5.2. Nos aseguramos de hacer click en "Run on Android device/emulator".

    Justo cuando estaba a punto de comprobarlo me he enterado de que se me había desconectado el portátil de la red wifi de mi móvil y estaba conectado en la eduroam.
    No funcionaba por eso. Tal vez más tarde compruebe 100% la solución del emulador, pero no he entendido del todo cómo funciona lo de ejecutar el proyecto lanzado en el propio emulador.

    
** Commit 03: Componentes funcionales en React Native (Tiempo: 15mins)
    En este commit (por fin) no ha habido ningún problema relevante.
    El único problema que ha surgido ha sido que la importación del "View" estaba duplicada. Al aparecer el error simplemente he eliminado la duplicidad y lo he relanzado.

** Commit 04: Stack Navigation (Tiempo: 15mins)
    En este commit no ha habido grandes problemas.
    Aun así, usaré el documento para añadir notas de cara a futuro:
        - ¿Qué es un Navigator? Un contenedor que define cómo se gestionan las transiciones entre diferentes pantallas (screens).
            Tipos: Stack Navigator(Las pantallas se apilan una sobre otra, y puedes navegar hacia adelante o retroceder), Tab Navigator(Las pantallas se organizan en pestañas que el usuario puede seleccionar), Drawer Navigator(Las pantallas se seleccionan desde un menú deslizable), Bottom Tab Navigator(Similar al Tab Navigator, pero las pestañas están en la parte inferior de la pantalla).
        - ¿Qué es un Screen? Una pantalla individual en la aplicación.

        Un navigator es como un contenedor que organiza y gestiona múltiples screens.
        Cada screen es una vista individual que el usuario puede ver.
        Los screens se definen dentro de un navigator usando componentes como Stack.Screen, Tab.Screen, etc.

    Además, he añadido también una línea de código extra para que "Calendario Gaztaroa" de la página principal esté centrada y no a la izquierda, tal y como se muestra en el documento "(headerTitleAlign: 'center',)".
    
** Commit 05: Drawer Navigation (Tiempo: 1h)
    En este commit he añadido el Drawer navigator con las opciones "Campo Base" y "Calendario". Las he enlazado mediante "DrawerNavegador".
    He pasado un buen rato comprobando si funcionaba porque no me había enterado de que el Drawer aparecía deslizando el dedo en el móvil. 

** Commit 06: Ejercicio Componentes y Navegacion (Tiempo: 3horas)
    Cuando estaba haciendo la práctica, Pablo me contó que había resuelto un problema relacionado con el no cargado de la app. 
    Si en vez de lanzarla mediante ** npx expo start --clear ** añadimos la opción ** --tunnel ** nos evitamos el problema. Esta opción no elimina el caché.
    
    En este commit, primero hemos creado el componente ContactoComponent. Simplemente hemos añadido la información correspondiente a lo que se debe mostrar, envuelto en un Card y ScrollView. 
    Después, en CampobaseComponent.js hemos añadido el StackNavigator de Contacto y se lo he añadido al Darwer Navigator.

    Después, al crear QuienesSomosComponent, he creado dons Cards distintos, un Card con la historia del club y otro con la lista de actividades y recursos.
    Durante la implementación, me he encontrado con el error:
    (NOBRIDGE) ERROR  VirtualizedLists should never be nested inside plain ScrollViews with the same orientation because it can break windowing and other functionality - use another VirtualizedList-backed container instead. [Component Stack] 
    Para solucionarlo, moví el ScrollView al nivel superior del componente, asegurándome de que el FlatList estuviera correctamente encapsulado dentro de su propia Card. Esto resolvió el problema y permitió que toda la pantalla fuera desplazable.

    Además, en Home y DetalleExcursión hemos cambiado los títulos a color chocolate, con letra gande y dentro de la imagen envolviendo el texto en la imagen mediante un Card.FeaturedTitle.

    Por último, me he enterado de que no había configurado bien el estilo de navegación en la pantalla de Detalle Excursión. He ajustado la navegación para que, tal y como se muestra en el video, al estar en Detalle Excursión aparezca "Calendario Gaztaroa" subrayado junto a la flecha de ir hacia atrás.
    
** Commit 07: Botones e icons (4.5h)
    En la sección 1 he empezado añadiendo el código del guión, añadiendo a continuación el código correspondiente a 
    [... renderizar aquí el contenido de los comentarios ...] y [... actualizar estado para tener acceso a los comentarios ...].
    Para ello, he añadido un view con el contenido de los comentarios en el return de RenderComentario y añadido la línea comentarios: COMENTARIOS en el this.state.
    Después, viendo que el formato en el que había presentado los comentarios de los usuarios no era como el de la página 10 del informe, lo adapté para que mantuviera el mismo estilo.
    Simplemente en vez de mostrar primero el autor y después el usuario pasé a mostrar primero el autor, después el rating y, por último, en la misma línea el usuario y la fecha. Conseguí concatenarlos en la misma línea mediente una coma (-- {comentario.autor}, {comentario.dia})

    Después, he añadido el código correspondiente al icon del corazón. Así, he estudiado también el uso de .some, aprendiendo que verifica si al menos un elemento de un array cumple con la condición especificada. En este caso, se usa para verificar si una excursión está marcada como favorita.
    Asimismo, también he modificadel código para que la fecha y hora del comentario se muestren adecuadamente. Para eso, como los espacios de los dos puntos me daban problemas, he usado la función replace.
    Así, mediante Intl.DateTimeFormat he formateado la fecha y hora al formato mostrado especificado.

    En el apartado sobre los iconos en a la izquierda de cada una de las opciones del menú, una vez copiado el código, me ha aparecido un error sobre el campo Home. Me he enterado, que antes en vez de Home tenía puesto Campo Base como initial RouteName, por lo que he cambiado "Home" por "Campo base" para eliminar el error.
    Después, para el resto de los iconos, he reutilizado el código para añadir el icono cambiando el campo name por el indicado en el tutorial.

    Por último, el mayor "drama" del ejercicio ha venido de la mano del botón tipo hamburger para desplegar el Drawer Menu. La cosa es que replicando lo que indicaba el ejercicio no funcionaba. El icono como tal salía pero no funcionaba.
    Tras hacer muchos intentos, encontré en internet una persona que en vez de poner el icono y su funcionalidad en la propia función del navigator pasaba el header y su configuración al Drawer.Screen. 
    El problema de este planteamiento es que para el caso de "Calendario" la ventana de "Detalle Excursión" no mantenía el formato. Por eso, he puesto el icono del hamburger en el propio Navigator y he dejado ese header igual. 
    Por tanto, las tres lineas para abrir el Drawer Menu funcionan en todos los casos excepto el de Calendario, que es sobre todo visual.

** Commit 08: Servidor JSON (2h)
    En este apartado, hemos comenzado siguiendo los pasos del guión: hemos instalado json-server, hemos creado la carpeta public con el directorio imagenes en sus interior (y las imágenes).
    Al probar a correr el servidor a la primera, me marcó un error. Que resultó ser que para poder lanzarlo el orden correcto era lanzar primero el servidor json y después la app.

    Después, creé el archivo comun.js e introduje la IP y los colores en él. Importé la url y los colores en los archivos donde los iba a necesitar y cambié los directorios y colores escritos a mano en su debía
    por los del archivo comun.js.

    A raíz de eso, tuve un problema con la importación de las imágenes, que resultó ser que había puesto la carpeta public en el directorio appGaztaroaJavascript, y no en json-server.
    Aun así, cabe destar el dato de que cambiar un poco los archivos detalleExcursión y Home para poder tomar datos de la base de datos tipo json y poder eliminar la importación de EXCURSIONES, COMENTARIOS etc. aunque la práctica no lo exigía.
    Como dato extra, me he fijado de que la imagen de 40 años que aparece en mi home y el del ejemplo es distinto. Para que fuera el mismo, he modificado el directorio 40Años del db.json para ese campo en concreto (en cabeceras)

    NOTA: me he fijado de que cuando hay que tomar los datos de la base de datos va un poco lento. No sé si es por la velocidad de la base de datos o de mi propio movil u ordenador (o ambos).